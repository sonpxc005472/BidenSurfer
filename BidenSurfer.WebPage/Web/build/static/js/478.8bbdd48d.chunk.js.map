{"version":3,"file":"static/js/478.8bbdd48d.chunk.js","mappings":"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","sources":["components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.tsx","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.tsx","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.tsx","pages/NotificationsPage.tsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { media } from '@app/styles/themes/constants';\r\n\r\nconst colStyles = {\r\n  height: '75px',\r\n  minWidth: '50px',\r\n  fontWeight: 600,\r\n  padding: '0.3125rem',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n};\r\n\r\nexport const Col = styled.div`\r\n  ${colStyles};\r\n\r\n  border-bottom: 1px solid rgba(var(--primary-rgb-color), 0.3);\r\n\r\n  @media only screen and ${media.md} {\r\n    justify-content: unset;\r\n    font-size: 1rem;\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  @media only screen and ${media.xl} {\r\n    padding: 0.75rem;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n\r\n  & .ant-checkbox-wrapper {\r\n    color: inherit;\r\n    font: inherit;\r\n\r\n    & > .ant-checkbox > .ant-checkbox-inner {\r\n      border-radius: 3px;\r\n\r\n      border-color: var(--primary-color);\r\n    }\r\n  }\r\n\r\n  &:last-of-type {\r\n    ${Col} {\r\n      justify-content: unset;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const HeaderCol = styled(Col)`\r\n  background: var(--secondary-background-color);\r\n\r\n  border-top: 1px solid rgba(var(--primary-rgb-color), 0.3);\r\n\r\n  color: var(--primary-color);\r\n\r\n  & .ant-checkbox-wrapper {\r\n    flex-wrap: wrap;\r\n    row-gap: 0.5rem;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Option } from '../interfaces';\r\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\r\nimport * as S from './CheckboxColumn.styles';\r\nimport { BaseCheckbox } from '@app/components/common/BaseCheckbox/BaseCheckbox';\r\n\r\ninterface CheckboxColumnProps {\r\n  column: Omit<Option, 'id'>;\r\n  handleCheck: (list: CheckboxValueType[]) => void;\r\n  setTriggered: (state: boolean) => void;\r\n}\r\n\r\nexport const CheckboxColumn: React.FC<CheckboxColumnProps> = ({ column, handleCheck, setTriggered }) => {\r\n  const [checkedList, setCheckedList] = React.useState<CheckboxValueType[]>([]);\r\n  const [indeterminate, setIndeterminate] = React.useState(false);\r\n  const [checkAll, setCheckAll] = React.useState(false);\r\n\r\n  const onChange = (list: CheckboxValueType[]) => {\r\n    setCheckedList(list);\r\n    setIndeterminate(!!list.length && list.length < column.data.length);\r\n    setCheckAll(list.length === column.data.length);\r\n    handleCheck(list);\r\n    setTriggered(true);\r\n  };\r\n\r\n  const onCheckAllChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCheckedList(event.target.checked ? column.data : []);\r\n    setIndeterminate(false);\r\n    setCheckAll(event.target.checked);\r\n    handleCheck(event.target.checked ? column.data : []);\r\n    setTriggered(true);\r\n  };\r\n\r\n  const props = {\r\n    indeterminate,\r\n    onChange: onCheckAllChange,\r\n    checked: checkAll,\r\n  };\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <S.HeaderCol>{column.headerRender ? column.headerRender(column.header, props) : column.header}</S.HeaderCol>\r\n      <BaseCheckbox.Group value={checkedList} onChange={onChange}>\r\n        {column.data.map((el, index) => (\r\n          <S.Col key={index}>{column.dataRender ? column.dataRender(el) : el}</S.Col>\r\n        ))}\r\n      </BaseCheckbox.Group>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n\r\n  & + div {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\r\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\r\nimport { CheckboxColumn } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn';\r\nimport { Option } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/interfaces';\r\nimport * as S from './NotificationsTypes.styles';\r\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\r\nimport { notificationController } from '@app/controllers/notificationController';\r\nimport { BaseCheckbox } from '@app/components/common/BaseCheckbox/BaseCheckbox';\r\n\r\ninterface Notifications {\r\n  1: string[];\r\n  2: string[];\r\n  3: string[];\r\n}\r\n\r\nexport const NotificationsTypes: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [checkedElements, setCheckedElements] = useState<Notifications>({\r\n    1: [],\r\n    2: [],\r\n    3: [],\r\n  });\r\n\r\n  const [isTriggered, setTriggered] = useState(false);\r\n\r\n  const options: Option[] = [\r\n    {\r\n      id: 1,\r\n      header: t('common.email'),\r\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\r\n      data: [\r\n        'emailMessages',\r\n        'emailMentions',\r\n        'emailReminders',\r\n        'emailAllNews',\r\n        'emailImportantNews',\r\n        'emailActionRequired',\r\n      ],\r\n      dataRender: (text) => <BaseCheckbox value={text} />,\r\n    },\r\n    {\r\n      id: 2,\r\n      header: t('profile.nav.notifications.push'),\r\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\r\n      data: ['pushMessages', 'pushMentions', 'pushReminders', 'pushAllNews', 'pushImportantNews', 'pushActionRequired'],\r\n      dataRender: (text) => <BaseCheckbox value={text} />,\r\n    },\r\n    {\r\n      id: 3,\r\n      header: t('profile.nav.notifications.SMS'),\r\n      headerRender: (text, props) => <BaseCheckbox {...props}>{text}</BaseCheckbox>,\r\n      data: ['smsMessages', 'smsMentions', 'smsReminders', 'smsAllNews', 'smsImportantNews', 'smsActionRequired'],\r\n      dataRender: (text) => <BaseCheckbox value={text} />,\r\n    },\r\n    {\r\n      id: 4,\r\n      header: t('profile.nav.notifications.activities'),\r\n      data: [\r\n        t('profile.nav.notifications.directMessages'),\r\n        t('profile.nav.notifications.mentions'),\r\n        t('profile.nav.notifications.reminders'),\r\n        t('profile.nav.notifications.allNews'),\r\n        t('profile.nav.notifications.importantNews'),\r\n        t('profile.nav.notifications.actionRequired'),\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const handleCheck = useCallback(\r\n    (mode: number) => (list: CheckboxValueType[]) => {\r\n      setCheckedElements({ ...checkedElements, [mode]: list });\r\n    },\r\n    [checkedElements],\r\n  );\r\n\r\n  const onCancel = useCallback(() => {\r\n    setTriggered(false);\r\n  }, [setTriggered]);\r\n\r\n  const onFinish = useCallback(async () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      setTriggered(false);\r\n      notificationController.success({ message: t('common.success') });\r\n      console.log(checkedElements);\r\n    }, 1000);\r\n  }, [setTriggered, checkedElements, t]);\r\n\r\n  return (\r\n    <BaseButtonsForm\r\n      name=\"notifications\"\r\n      onFinish={onFinish}\r\n      isFieldsChanged={isTriggered}\r\n      setFieldsChanged={setTriggered}\r\n      footer={<BaseButtonsGroup loading={isLoading} onCancel={onCancel} />}\r\n    >\r\n      <S.Wrapper>\r\n        {options.map((item) => (\r\n          <CheckboxColumn key={item.id} column={item} handleCheck={handleCheck(item.id)} setTriggered={setTriggered} />\r\n        ))}\r\n      </S.Wrapper>\r\n    </BaseButtonsForm>\r\n  );\r\n};\r\n","import { BaseTypography } from '@app/components/common/BaseTypography/BaseTypography';\r\nimport { media } from '@app/styles/themes/constants';\r\nimport styled from 'styled-components';\r\n\r\nexport const Description = styled(BaseTypography.Text)`\r\n  display: block;\r\n  font-size: 0.75rem;\r\n  margin-bottom: 1rem;\r\n\r\n  @media only screen and ${media.md} {\r\n    font-size: 1rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\r\nimport { BaseCard } from '@app/components/common/BaseCard/BaseCard';\r\nimport { NotificationsTypes } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes';\r\nimport * as S from './Notifications.styles';\r\n\r\nexport const Notifications: React.FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <BaseCard>\r\n      <BaseButtonsForm.Item>\r\n        <BaseButtonsForm.Title>{t('profile.nav.notifications.settings')}</BaseButtonsForm.Title>\r\n      </BaseButtonsForm.Item>\r\n      <S.Description>{t('profile.nav.notifications.description')}</S.Description>\r\n      <NotificationsTypes />\r\n    </BaseCard>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Notifications } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\r\n\r\nconst NotificationsPage: React.FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>{t('profile.nav.notifications.title')}</PageTitle>\r\n      <Notifications />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotificationsPage;\r\n"],"names":["Col","styled","div","_templateObject","_taggedTemplateLiteral","height","minWidth","fontWeight","padding","display","alignItems","justifyContent","media","md","xl","Wrapper","_templateObject2","HeaderCol","_templateObject3","CheckboxColumn","_ref","column","handleCheck","setTriggered","checkedList","setCheckedList","React","indeterminate","setIndeterminate","checkAll","setCheckAll","props","onChange","event","target","checked","data","_jsxs","S","children","_jsx","headerRender","header","BaseCheckbox","Group","value","list","length","map","el","index","dataRender","NotificationsTypes","t","useTranslation","isLoading","setLoading","useState","checkedElements","setCheckedElements","isTriggered","options","id","text","useCallback","mode","onCancel","onFinish","async","setTimeout","notificationController","success","message","console","log","BaseButtonsForm","name","isFieldsChanged","setFieldsChanged","footer","BaseButtonsGroup","loading","item","Description","BaseTypography","Text","Notifications","BaseCard","Item","Title","NotificationsPage","_Fragment","PageTitle"],"sourceRoot":""}